/*
 * tests.P
 *
 * Copyright 2018 Franco Masotti
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

:- import format/2 from format.
:- import format/3 from format.

/* Transform to ms like the SWI Prolog walltimes. */
to_milliseconds([Head,Seconds|Tail], Milliseconds) :-
    Milliseconds is Seconds * 1000.

tests_single_test33_cond_prob(Min,Max,Step,Run_label,Resampling_style, Resampling_probability):-
    consult('./ami'),
    load_files(['./programs/bnets/test33']),
    writeln("performing test33.P on test33_cond_prob.csv\n"),
    open('test33_cond_prob.csv',append,Out_a),
    loop_test33_cond_prob(Min,Max,Step,Run_label,Resampling_style,Resampling_probability,Out_a),
    close(Out_a).
  
loop_test33_cond_prob(Curr,Max,_,_,_,_,_):-
    Curr>Max,
    !.

loop_test33_cond_prob(Curr, Max, Step, Runs, Resampling_style, Resampling_probability, Out):-
    Samples is Curr,
    measure_test33_cond_prob(Time_adapt_on, Samples, 'on', Resampling_style, Resampling_probability, Prob_adapt_on),
    measure_test33_cond_prob(Time_adapt_off, Samples, 'off', Resampling_style, Resampling_probability, Prob_adapt_off),
    format("run ~q, sample ~q of ~q\n", [Runs, Samples, Max]),
    format(Out, "~q,~q,~q,~q,~q,~q\n", [Runs, Samples, Time_adapt_on, Prob_adapt_on, Time_adapt_off, Prob_adapt_off]),
    flush_output(Out),
    flush_output,
    N is Curr+Step,
    loop_test33_cond_prob(N,Max,Step,Runs,Resampling_style,Resampling_probability,Out).

measure_test33_cond_prob(Time, Samples, Adaptation, Resampling_style, Resampling_probability, Prob) :-
    adaptation(Adaptation),
    ( Resampling_style = 'singleswitch' 
      -> resampling_style(singleswitch)
      ; 1 = 1),
    ( Resampling_style = 'multiswitch' 
      -> resampling_style(multiswitch(Resampling_probability))
      ; 1 = 1),
    statistics(walltime,Before),
    cond_prob(t(query),t(evidence),100,Samples,Prob),
    statistics(walltime,After),
    to_milliseconds(After,Time),
    writeln(Time).
